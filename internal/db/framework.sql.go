// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: framework.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFramework = `-- name: CreateFramework :one
INSERT INTO frameworks (
  name, description, version, locked, editable, category
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, version, locked, editable, category, created_at, updated_at
`

type CreateFrameworkParams struct {
	Name        string
	Description pgtype.Text
	Version     pgtype.Text
	Locked      bool
	Editable    bool
	Category    []string
}

func (q *Queries) CreateFramework(ctx context.Context, arg CreateFrameworkParams) (Framework, error) {
	row := q.db.QueryRow(ctx, createFramework,
		arg.Name,
		arg.Description,
		arg.Version,
		arg.Locked,
		arg.Editable,
		arg.Category,
	)
	var i Framework
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.Locked,
		&i.Editable,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFramework = `-- name: DeleteFramework :exec
DELETE FROM frameworks WHERE id = $1
`

func (q *Queries) DeleteFramework(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFramework, id)
	return err
}

const getFramework = `-- name: GetFramework :one
SELECT id, name, description, version, locked, editable, category, created_at, updated_at FROM frameworks
WHERE id = $1
`

func (q *Queries) GetFramework(ctx context.Context, id uuid.UUID) (Framework, error) {
	row := q.db.QueryRow(ctx, getFramework, id)
	var i Framework
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.Locked,
		&i.Editable,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFrameworks = `-- name: ListFrameworks :many
SELECT id, name, description, version, locked, editable, category, created_at, updated_at FROM frameworks
ORDER BY id
`

func (q *Queries) ListFrameworks(ctx context.Context) ([]Framework, error) {
	rows, err := q.db.Query(ctx, listFrameworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Framework
	for rows.Next() {
		var i Framework
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.Locked,
			&i.Editable,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFramework = `-- name: UpdateFramework :one
UPDATE frameworks
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  version = COALESCE($4, version),
  locked = COALESCE($5, locked),
  editable = COALESCE($6, editable),
  category = COALESCE($7, category),
  updated_at = now()
WHERE id = $1
RETURNING id, name, description, version, locked, editable, category, created_at, updated_at
`

type UpdateFrameworkParams struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	Version     pgtype.Text
	Locked      bool
	Editable    bool
	Category    []string
}

func (q *Queries) UpdateFramework(ctx context.Context, arg UpdateFrameworkParams) (Framework, error) {
	row := q.db.QueryRow(ctx, updateFramework,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Version,
		arg.Locked,
		arg.Editable,
		arg.Category,
	)
	var i Framework
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.Locked,
		&i.Editable,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
